{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/cli/config.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { CompilerOptions, ParsedConfiguration, readConfiguration, EmitFlags } from '@angular/compiler-cli' ;\nimport { ParsedArgs } from 'minimist';\n\nexport interface NgcParsedConfiguration extends ParsedConfiguration { watch?: boolean; }\n\nexport function readNgcCommandLineAndConfiguration(args: any,\n                                                   parsedArgs?: ParsedArgs): NgcParsedConfiguration {\n  const options: CompilerOptions = {};\n  parsedArgs = parsedArgs || require('minimist')(args);\n\n  if (parsedArgs.i18nFile) options.i18nInFile = parsedArgs.i18nFile;\n  if (parsedArgs.i18nFormat) options.i18nInFormat = parsedArgs.i18nFormat;\n  if (parsedArgs.locale) options.i18nInLocale = parsedArgs.locale;\n  const mt = parsedArgs.missingTranslation;\n  if (mt === 'error' || mt === 'warning' || mt === 'ignore') {\n    options.i18nInMissingTranslations = mt;\n  }\n  const config = readCommandLineAndConfiguration(\n    args,\n    options,\n    ['i18nFile', 'i18nFormat', 'locale', 'missingTranslation', 'watch']\n  );\n\n  const watch = parsedArgs.w || parsedArgs.watch;\n  return {...config, watch: !!watch};\n}\n\n\nexport function readCommandLineAndConfiguration(args: string[],\n                                                existingOptions: CompilerOptions = {},\n                                                ngCmdLineOptions: string[] = []): ParsedConfiguration {\n  let cmdConfig = ts.parseCommandLine(args);\n  const project = cmdConfig.options.project || '.';\n  const cmdErrors = cmdConfig.errors.filter(e => {\n    if (typeof e.messageText === 'string') {\n      const msg = e.messageText;\n      return !ngCmdLineOptions.some(o => msg.indexOf(o) >= 0);\n    }\n    return true;\n  });\n  if (cmdErrors.length) {\n    return {\n      project,\n      rootNames: [],\n      options: cmdConfig.options,\n      errors: cmdErrors,\n      emitFlags: EmitFlags.Default\n    };\n  }\n  const config = readConfiguration(project, cmdConfig.options);\n  const options = {...config.options, ...existingOptions};\n  if (options.locale) {\n    options.i18nInLocale = options.locale;\n  }\n  return {\n    project,\n    rootNames: config.rootNames,\n    options,\n    errors: config.errors,\n    emitFlags: config.emitFlags\n  };\n}\n"]}