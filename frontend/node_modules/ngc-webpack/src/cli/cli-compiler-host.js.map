{"version":3,"file":"cli-compiler-host.js","sourceRoot":"","sources":["../../../src/cli/cli-compiler-host.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport {basename, dirname, join, sep} from 'path';\nimport * as fs from 'fs';\nimport { WebpackResourceLoader } from '../resource-loader';\n\nfunction denormalizePath(path: string): string {\n  return path.replace(/\\//g, sep);\n}\n\nexport interface OnErrorFn {\n  (message: string): void;\n}\n\nexport class CliCompilerHost implements ts.CompilerHost {\n  private resourceCache = new Map<string, string>();\n  private host: ts.CompilerHost;\n\n  constructor(private options: ts.CompilerOptions, public resourceLoader?: WebpackResourceLoader) {\n    this.host = ts.createCompilerHost(this.options, true);\n  }\n\n  fileExists(fileName: string): boolean {\n    return this.host.fileExists(fileName);\n  }\n\n  readFile(fileName: string): string {\n    return this.host.readFile(fileName);\n  }\n\n  getDirectories(path: string): string[] {\n    return this.host.getDirectories(path);\n  }\n\n  getSourceFile(fileName: string, languageVersion: ts.ScriptTarget, _onError?: OnErrorFn) {\n    return this.host.getSourceFile(fileName, languageVersion, _onError);\n  }\n\n  getCancellationToken() {\n    return this.host.getCancellationToken!();\n  }\n\n  getDefaultLibFileName(options: ts.CompilerOptions) {\n    return this.host.getDefaultLibFileName(options);\n  }\n\n  writeFile(fileName: string, data: string, _writeByteOrderMark: boolean,\n            _onError?: (message: string) => void, _sourceFiles?: ts.SourceFile[]) {\n    return this.host.writeFile(fileName, data, _writeByteOrderMark, _onError, _sourceFiles);\n  }\n\n  getCurrentDirectory(): string {\n    return this.host.getCurrentDirectory();\n  }\n\n  getCanonicalFileName(fileName: string): string {\n    return this.host.getCanonicalFileName(fileName);\n  }\n\n  useCaseSensitiveFileNames(): boolean {\n    return this.host.useCaseSensitiveFileNames();\n  }\n\n  getNewLine(): string {\n    return this.host.getNewLine();\n  }\n\n  readResource(fileName: string): Promise<string> | string {\n    if (this.resourceLoader) {\n      // These paths are meant to be used by the loader so we must denormalize them.\n      const denormalizedFileName = denormalizePath(fileName);\n      return this.resourceLoader.get(denormalizedFileName)\n        .then( content => {\n          this.resourceCache.set(denormalizedFileName, content);\n          return content;\n        });\n    } else {\n      return this.readFile(fileName);\n    }\n  }\n\n  /**\n   * Returns a cached resource, if the resource is not cached returns undefined.\n   * Will not try to get the resource if it does not exists.\n   * @param {string} fileName\n   * @returns {string}\n   */\n  getResource(fileName: string): string | undefined {\n    return this.resourceCache.get(fileName);\n  }\n}\n"]}