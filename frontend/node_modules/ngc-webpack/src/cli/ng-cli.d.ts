/// <reference types="minimist" />
import * as minimist from 'minimist';
import { ParsedDiagnostics } from './util';
/**
 * Run `ngc-webpack` in library mode (i.e. run `ngc`) using `@angular/cli` (ng) configuration.
 * The cli is used to create a live instance of the webpack configuration, from there it is the same process as [[runCli]]
 *
 * `tsconfig` json path is taken from the options of AngularCompilerPlugin
 *
 * > This is not recommended, you would normally want to provide your own tsconfig with proper `angularCompilerOptions`.
 */
export declare function runNgCli(): Promise<ParsedDiagnostics>;
/**
 * Run `ngc-webpack` in library mode (i.e. run `ngc`) using `@angular/cli` (ng) configuration.
 * The cli is used to create a live instance of the webpack configuration, from there it is the same process as [[runCli]]
 *
 * `tsconfig` json path is taken from cli parameters (-p or --project) or, if not exists the options of
 * AngularCompilerPlugin
 *
 * @param cliParams cli Parameters, parsedArgs is not mandatory
 */
export declare function runNgCli(cliParams: {
    args: string[];
    parsedArgs?: minimist.ParsedArgs;
}): Promise<ParsedDiagnostics>;
/**
 * Run `ngc-webpack` in library mode (i.e. run `ngc`) using `@angular/cli` (ng) configuration.
 * The cli is used to create a live instance of the webpack configuration, from there it is the same process as [[runCli]]
 *
 * `tsconfig` json path is taken from the supplied tsConfigPath parameter.
 *
 * @param {string} tsConfigPath
 * @param cliParams cli Parameters, parsedArgs is not mandatory
 */
export declare function runNgCli(tsConfigPath: string, cliParams?: {
    args: string[];
    parsedArgs?: minimist.ParsedArgs;
}): Promise<ParsedDiagnostics>;
