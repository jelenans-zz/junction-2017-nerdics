{"version":3,"file":"cli-context.js","sourceRoot":"","sources":["../../../src/cli/cli-context.ts"],"names":[],"mappings":"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","sourcesContent":["import * as FS from 'fs';\nimport * as Path from 'path';\nimport * as ts from 'typescript';\n\nimport { TsEmitArguments } from '@angular/compiler-cli';\nimport { WebpackResourceLoader } from '../resource-loader';\n\nimport { NgcParsedConfiguration } from './config';\nimport { createTsickleEmitCallback, defaultEmitCallback, createSrcToOutPathMapper } from './util';\nimport { CliCompilerHost } from './cli-compiler-host';\nimport { inlineResources } from './transformers/inline-resources';\nimport { inlineMetadataBundle } from './inline-metadata';\n\nexport function createCliContext(config: NgcParsedConfiguration) {\n  let sourceToOutMapper: (srcFileName: string, reverse?: boolean) => string;\n\n  const compilerHost = new CliCompilerHost(config.options, new WebpackResourceLoader());\n  const getResource = (resourcePath: string): string | undefined => compilerHost.getResource(resourcePath);\n  const realEmitCallback = createTsickleEmitCallback(config.options); // defaultEmitCallback;\n\n\n  const inlineMetadataModule = (fileName: string, data: string): string => {\n    const metadataBundle = JSON.parse(data);\n\n    let relativeTo = Path.dirname(fileName);\n    if (sourceToOutMapper) {\n      relativeTo = sourceToOutMapper(relativeTo, true);\n    }\n\n    // process the metadata bundle and inline resources\n    // we send the source location as the relative folder (not the dest) so matching resource paths\n    // with compilerHost will work.\n    metadataBundle.forEach( m => inlineMetadataBundle(relativeTo, m, getResource) );\n\n    return JSON.stringify(metadataBundle);\n  };\n\n  const emitCallback = (emitArgs: TsEmitArguments) => {\n    const writeFile = (...args: any[]) => {\n      // we don't need to collect all source files mappings, we need only 1 so it's a bit different\n      // from angular's code\n      if (!sourceToOutMapper) {\n        const outFileName: string = args[0];\n        const sourceFiles: ts.SourceFile[] = args[4];\n        if (sourceFiles && sourceFiles.length == 1) {\n          sourceToOutMapper = createSrcToOutPathMapper(\n            config.options.outDir,\n            sourceFiles[0].fileName,\n            outFileName\n          );\n        }\n      }\n      return emitArgs.writeFile.apply(null, args);\n    };\n    return realEmitCallback(Object.create(emitArgs, { writeFile: { value: writeFile } }));\n  };\n\n  return {\n    compilerHost,\n    createCompilation(compiler) {\n      const compilation = compiler.createCompilation();\n      compilerHost.resourceLoader.update(compilation);\n      return compilation;\n    },\n    getResource,\n    createInlineResourcesTransformer() {\n      return inlineResources(\n        getResource,\n        (fileName: string) => !fileName.endsWith('.ngfactory.ts') && !fileName.endsWith('.ngstyle.ts')\n      )\n    },\n    emitCallback,\n\n    /**\n     * Returns a compilerHost instance that inline all resources (templateUrl, styleUrls) inside metadata files that was\n     * created for a specific module (i.e. not a flat metadata bundle module)\n     *\n     */\n    resourceInliningCompilerHost() {\n      return Object.create(compilerHost, {\n        writeFile: {\n          writable: true,\n          value: (fileName: string, data: string, ...args: any[]): void => {\n            if (/\\.metadata\\.json$/.test(fileName)) {\n              data = inlineMetadataModule(fileName, data);\n            }\n            return compilerHost.writeFile(fileName, data, args[0], args[1], args[2]);\n          }\n        }\n      })\n    },\n\n    inlineFlatModuleMetadataBundle(relativeTo: string, flatModuleOutFile: string): void {\n      let metadataPath = Path.resolve(relativeTo, flatModuleOutFile.replace(/\\.js$/, '.metadata.json'));\n\n      if (sourceToOutMapper) {\n        metadataPath = sourceToOutMapper(metadataPath);\n      }\n\n      if (!FS.existsSync(metadataPath)) {\n        throw new Error(`Could not find flat module \"metadata.json\" output at ${metadataPath}`);\n      }\n\n      const metadataBundle = JSON.parse(FS.readFileSync(metadataPath, { encoding: 'utf8' }));\n\n      // process the metadata bundle and inline resources\n      // we send the source location as the relative folder (not the dest) so matching resource paths\n      // with compilerHost will work.\n      inlineMetadataBundle(relativeTo, metadataBundle, getResource);\n\n      FS.writeFileSync(metadataPath, JSON.stringify(metadataBundle), { encoding: 'utf8' });\n    }\n  }\n}"]}