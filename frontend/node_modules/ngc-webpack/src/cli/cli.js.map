{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../../src/cli/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as webpack from 'webpack';\nimport * as minimist from 'minimist';\nimport { AngularCompilerPlugin, AngularCompilerPluginOptions } from '@ngtools/webpack';\n\nimport { NgcWebpackPlugin, NgcCompilerExecutionHost } from '../plugin';\nimport { NgcWebpackPluginOptions } from '../plugin-options';\nimport { promiseWrapper } from '../utils';\n\nimport { readNgcCommandLineAndConfiguration, NgcParsedConfiguration } from './config';\nimport { parseDiagnostics, ParsedDiagnostics } from './util';\nimport { performCompilationAsync } from './perform_compile_async';\nimport { createCliContext } from './cli-context';\n\n/**\n * Resolve the config to an object.\n * If it's a fn, invoke.\n *\n * Also check if it's a mocked ES6 Module in cases where TS file is used that uses \"export default\"\n * @param config\n * @returns {any}\n */\nfunction resolveConfig(config: any): any {\n  if (typeof config === 'function') {\n    return config();\n  } else if (config.__esModule === true && !!config.default) {\n    return resolveConfig(config.default);\n  } else {\n    return config;\n  }\n}\n\nexport function findPluginIndex(plugins: any[], type: any): number {\n  return plugins.findIndex( p => p instanceof type);\n}\n\nexport function getPluginMeta(plugins: any[]): { idx: number, instance: AngularCompilerPlugin | NgcWebpackPlugin, options: AngularCompilerPluginOptions } {\n  let idx = findPluginIndex(plugins, NgcWebpackPlugin);\n\n  if (idx > -1) {\n    return {\n      idx,\n      instance: plugins[idx],\n      options: plugins[idx].ngcWebpackPluginOptions\n    }\n  }\n\n  idx = findPluginIndex(plugins, AngularCompilerPlugin);\n  if (idx > -1) {\n    return {\n      idx,\n      instance: plugins[idx],\n      options: plugins[idx].options\n    }\n  }\n\n  // TODO: allow running without a plugin and create it here?\n  throw new Error('Could not find an instance of NgcWebpackPlugin or AngularCompilerPlugin in the provided webpack configuration');\n}\n\n\nfunction normalizeProjectParam(tsConfigPath: string, args: string[], parsedArgs: any): void {\n  const [ pIdx, projectIdx ] = [args.indexOf('-p'), args.indexOf('--project')];\n  parsedArgs.p = tsConfigPath;\n  if (pIdx > -1) {\n    args[pIdx + 1] = tsConfigPath;\n  } else {\n    args.push('-p', tsConfigPath);\n  }\n  if (projectIdx > -1) {\n    delete parsedArgs.project;\n    args.splice(projectIdx, 1);\n  }\n}\n\nfunction createCliExecutionHostFactory(config: NgcParsedConfiguration): {\n  createCliExecutionHost: (options: NgcWebpackPluginOptions) => NgcCompilerExecutionHost,\n  compilationResult: Promise<ParsedDiagnostics>\n} {\n  const pWrap = promiseWrapper<ParsedDiagnostics>();\n\n  return {\n    compilationResult: pWrap.promise,\n    createCliExecutionHost: (options: NgcWebpackPluginOptions): NgcCompilerExecutionHost => {\n      const inline = config.options.skipTemplateCodegen;\n      if (config.options.skipTemplateCodegen && !config.options.fullTemplateTypeCheck) {\n        /*\n          Angular cli's compiler host will not generate metadata if skipping template codegen or no full template typescheck.\n          See https://github.com/angular/angular/blob/master/packages/compiler-cli/src/transformers/compiler_host.ts#L440\n          This is required if we want to inline the resources while compiling and not in post.\n\n          To solve this we need to enforce `fullTemplateTypeCheck`:\n\n          options.fullTemplateTypeCheck = true;\n\n          but this has issues\n          see issue: https://github.com/angular/angular/issues/19905\n          which has pending PR to fix: https://github.com/angular/angular/pull/20490\n          and also, dev's might want this off...\n\n          current workaround will is to disable skipTemplateCodegen\n          this looks weired because we want it on...\n          but, at this point we have a config object (NgcParsedConfiguration) which is an angular-cli parsed config\n          created by called `readNgcCommandLineAndConfiguration`.\n          The config object has a property `emitFlags` which at this point has the flag `Codegen` OFF !!!\n          OFF reflects config.options.skipTemplateCodegen = true.\n\n          Setting `config.options.skipTemplateCodegen` to false, at this point, will not change the emitFlags.\n          The compiler will NOT emit template code gen but the `isSourceFile` method in\n          https://github.com/angular/angular/blob/master/packages/compiler-cli/src/transformers/compiler_host.ts#L440\n          will return true!\n\n          This is a weak workaround and a more solid one is required.\n\n          TODO: refactor workaround to a writeFile wrapper that will not write generated files.\n         */\n        // options.fullTemplateTypeCheck = true;\n        config.options.skipTemplateCodegen = false;\n      }\n\n      const ctx = createCliContext(config);\n      const { compilerHost } = ctx;\n\n      return {\n        execute(compiler: any): void {\n          const compilation = ctx.createCompilation(compiler);\n          const rootNames = config.rootNames.slice();\n\n          performCompilationAsync({\n            rootNames,\n            options: config.options,\n\n            /*\n                The compiler host \"writeFile\" is wrapped with a handler that will\n                inline all resources into metadata modules (non flat bundle modules)\n             */\n            host: (inline && !config.options.skipMetadataEmit && !config.options.flatModuleOutFile)\n              ? ctx.resourceInliningCompilerHost()\n              : compilerHost\n            ,\n            emitFlags: config.emitFlags,\n            // we use the compiler-cli emit callback but we wrap it so we can create a map of source file path to\n            // output file path\n            emitCallback: ctx.emitCallback,\n            customTransformers: {\n              beforeTs: inline ? [ ctx.createInlineResourcesTransformer() ] : []\n            }\n          })\n            .then( result => {\n              const parsedDiagnostics = parseDiagnostics(result.diagnostics, config.options);\n              if (parsedDiagnostics.exitCode !== 0) {\n                const error = parsedDiagnostics.error || new Error(parsedDiagnostics.exitCode.toString());\n                compilation.errors.push(error);\n              }\n\n              // inline resources into the flat metadata json file, if exists.\n              if (compilation.errors.length === 0 && config.options.flatModuleOutFile) {\n                // TODO: check that it exists, config.rootNames should not have it (i.e. it was added to rootNames)\n                const flatModulePath = rootNames[rootNames.length - 1];\n                ctx.inlineFlatModuleMetadataBundle(Path.dirname(flatModulePath), config.options.flatModuleOutFile);\n              }\n\n              pWrap.resolve(parsedDiagnostics);\n            } )\n            .catch( err => pWrap.reject(err));\n        },\n        compilerHost,\n        transformers: []\n      }\n    }\n  }\n}\n\n\n/**\n * Run `ngc-webpack` in library mode. (i.e. run `ngc`)\n * In Library mode compilation and output is done per module and no bundling is done.\n * Webpack is used for resource compilation through it's loader chain but does not bundle anything.\n * The webpack configuration, excluding loaders, has no effect.\n * The webpack configuration must include a plugin instance (either  NgcWebpackPlugin / AngularCompilerPlugin).\n *\n * Library mode configuration is done mainly from the `tsconfig` json file.\n *\n * `tsconfig` json path is taken from the options of NgcWebpackPlugin / AngularCompilerPlugin\n *\n * @param webpackConfig Webpack configuration module, object or string\n */\nexport function runCli(webpackConfig: string | webpack.Configuration): Promise<ParsedDiagnostics>;\n/**\n * Run `ngc-webpack` in library mode. (i.e. run `ngc`)\n * In Library mode compilation and output is done per module and no bundling is done.\n * Webpack is used for resource compilation through it's loader chain but does not bundle anything.\n * The webpack configuration, excluding loaders, has no effect.\n * The webpack configuration must include a plugin instance (either  NgcWebpackPlugin / AngularCompilerPlugin).\n *\n * Library mode configuration is done mainly from the `tsconfig` json file.\n *\n * `tsconfig` json path is taken from cli parameters (-p or --project) or, if not exists the options of\n * NgcWebpackPlugin / AngularCompilerPlugin\n *\n * @param webpackConfig Webpack configuration module, object or string,\n * @param cliParams cli Parameters, parsedArgs is not mandatory\n */\nexport function runCli(webpackConfig: string | webpack.Configuration,\n                       cliParams: { args: string[], parsedArgs?: minimist.ParsedArgs }): Promise<ParsedDiagnostics>;\n/**\n * Run `ngc-webpack` in library mode. (i.e. run `ngc`)\n * In Library mode compilation and output is done per module and no bundling is done.\n * Webpack is used for resource compilation through it's loader chain but does not bundle anything.\n * The webpack configuration, excluding loaders, has no effect.\n * The webpack configuration must include a plugin instance (either  NgcWebpackPlugin / AngularCompilerPlugin).\n *\n * Library mode configuration is done mainly from the `tsconfig` json file.\n *\n * `tsconfig` json path is taken from the supplied tsConfigPath parameter.\n *\n * @param webpackConfig Webpack configuration module, object or string,\n * @param tsConfigPath path to the tsconfig file, relative to process.cwd()\n * @param cliParams cli Parameters, parsedArgs is not mandatory\n */\nexport function runCli(webpackConfig: string | webpack.Configuration,\n                       tsConfigPath: string,\n                       cliParams?: { args: string[], parsedArgs?: minimist.ParsedArgs }): Promise<ParsedDiagnostics>;\nexport function runCli(webpackConfig: string | webpack.Configuration,\n                       tsConfigPath?: any,\n                       cliParams?: { args: string[], parsedArgs?: minimist.ParsedArgs }): Promise<ParsedDiagnostics> {\n  return Promise.resolve<null>(null)\n    .then( () => {\n      // normalize params:\n      if (tsConfigPath && typeof tsConfigPath !== 'string') {\n        cliParams = <any> tsConfigPath;\n        tsConfigPath = undefined;\n      }\n      if (!cliParams) {\n        cliParams = { args: [], parsedArgs: <any> {} };\n      } else if (!cliParams.parsedArgs) {\n        cliParams.parsedArgs = minimist(cliParams.args);\n      }\n      const { args, parsedArgs } = cliParams;\n\n      if (typeof webpackConfig === 'string') {\n        let configPath = Path.isAbsolute(webpackConfig)\n          ? webpackConfig\n          : Path.join(process.cwd(), webpackConfig)\n        ;\n\n        webpackConfig = require(configPath);\n      }\n\n      const configModule = resolveConfig(webpackConfig);\n      const pluginMeta = getPluginMeta(configModule.plugins || []);\n\n      if (!tsConfigPath) {\n        tsConfigPath = parsedArgs.p || parsedArgs.project || pluginMeta.options.tsConfigPath;\n      }\n      if (!tsConfigPath) {\n        throw new Error('Invalid configuration, please set tsconfig path in cli params -p or --project or in NgcWebpackPlugin configuration');\n      }\n      pluginMeta.options.tsConfigPath = tsConfigPath;\n      normalizeProjectParam(tsConfigPath, args, parsedArgs);\n\n      const config = readNgcCommandLineAndConfiguration(args, parsedArgs);\n\n      if (config.errors.length) {\n        return parseDiagnostics(config.errors, /*options*/ undefined);\n      }\n\n      const { compilationResult, createCliExecutionHost: executionHostFactory } = createCliExecutionHostFactory(config);\n      const plugin = new NgcWebpackPlugin(pluginMeta.options, executionHostFactory);\n      configModule.plugins.splice(pluginMeta.idx, 1);\n\n      const compiler = webpack(configModule);\n      plugin.apply(compiler);\n\n      return compilationResult\n    });\n\n}\n\n\nif (require.main === module) {\n  const args: string[] = process.argv.slice(2);\n  const parsedArgs = minimist(args);\n\n  const webpackConfig = parsedArgs.webpack;\n\n  if (!webpackConfig) {\n    throw new Error('Missing webpack argument');\n  }\n\n  delete parsedArgs.webpack;\n  args.splice(args.indexOf('--webpack'), 2);\n\n  runCli(webpackConfig, { args, parsedArgs })\n    .then( parsedDiagnostics => {\n      if (parsedDiagnostics.error) {\n        console.error(parsedDiagnostics.error);\n      }\n      process.exit(parsedDiagnostics.exitCode);\n    });\n}\n"]}