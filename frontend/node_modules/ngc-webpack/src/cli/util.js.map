{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/cli/util.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {\n  CompilerOptions,\n  exitCodeFromResult,\n  formatDiagnostics,\n  Diagnostics,\n  filterErrorsAndWarnings,\n  TsEmitCallback\n} from '@angular/compiler-cli';\n\nimport * as tsickle from 'tsickle';\n\nexport const GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\nexport const DTS = /\\.d\\.ts$/;\n\nexport interface ParsedDiagnostics {\n  exitCode: number;\n  error?: Error;\n}\n\nexport function parseDiagnostics(allDiagnostics: Diagnostics,\n                                 options?: CompilerOptions): ParsedDiagnostics {\n  const result: ParsedDiagnostics = { exitCode: exitCodeFromResult(allDiagnostics) };\n\n  const errorsAndWarnings = filterErrorsAndWarnings(allDiagnostics);\n  if (errorsAndWarnings.length) {\n    let currentDir = options ? options.basePath : undefined;\n    const formatHost: ts.FormatDiagnosticsHost = {\n      getCurrentDirectory: () => currentDir || ts.sys.getCurrentDirectory(),\n      getCanonicalFileName: fileName => fileName,\n      getNewLine: () => ts.sys.newLine\n    };\n    result.error = new Error(formatDiagnostics(errorsAndWarnings, formatHost));\n  }\n  return result;\n}\n\nexport const defaultEmitCallback: TsEmitCallback =\n  ({program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers}) =>\n    program.emit(targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n\nexport function createTsickleEmitCallback(options: CompilerOptions): TsEmitCallback | undefined {\n  const transformDecorators = options.annotationsAs !== 'decorators';\n  const transformTypesToClosure = options.annotateForClosureCompiler;\n  if (!transformDecorators && !transformTypesToClosure) {\n    return undefined;\n  }\n  if (transformDecorators) {\n    // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\n    // Otherwise tsickle might emit references to non imported values\n    // as TypeScript elided the import.\n    options.emitDecoratorMetadata = true;\n  }\n  const tsickleHost: tsickle.TsickleHost = {\n    shouldSkipTsickleProcessing: fileName => DTS.test(fileName) || GENERATED_FILES.test(fileName),\n    pathToModuleName: (context, importPath) => '',\n    shouldIgnoreWarningsForPath: (filePath) => false,\n    fileNameToModuleId: (fileName) => fileName,\n    googmodule: false,\n    untyped: true,\n    convertIndexImportShorthand: false, transformDecorators, transformTypesToClosure,\n  };\n\n  return ({\n            program,\n            targetSourceFile,\n            writeFile,\n            cancellationToken,\n            emitOnlyDtsFiles,\n            customTransformers = {},\n            host,\n            options\n          }) =>\n    tsickle.emitWithTsickle(\n      program,\n      tsickleHost,\n      host,\n      options,\n      targetSourceFile,\n      writeFile,\n      cancellationToken,\n      emitOnlyDtsFiles,\n      {\n        beforeTs: customTransformers.before,\n        afterTs: customTransformers.after,\n      }\n    );\n}\n\n/**\n * Returns a function that can adjust a path from source path to out path,\n * based on an existing mapping from source to out path.\n *\n * TODO(tbosch): talk to the TypeScript team to expose their logic for calculating the `rootDir`\n * if none was specified.\n *\n * Note: This function works on normalized paths from typescript.\n *\n * @param outDir\n * @param outSrcMappings\n */\nexport function createSrcToOutPathMapper(outDir: string | undefined,\n                                         sampleSrcFileName: string | undefined,\n                                         sampleOutFileName: string | undefined,\n                                         host: {\n                                            dirname: typeof path.dirname,\n                                           resolve: typeof path.resolve,\n                                           relative: typeof path.relative\n                                        } = path): (srcFileName: string, reverse?: boolean) => string {\n  let srcToOutPath: (srcFileName: string) => string;\n  if (outDir) {\n    let path: {} = {};  // Ensure we error if we use `path` instead of `host`.\n    if (sampleSrcFileName == null || sampleOutFileName == null) {\n      throw new Error(`Can't calculate the rootDir without a sample srcFileName / outFileName. `);\n    }\n    const srcFileDir = normalizeSeparators(host.dirname(sampleSrcFileName));\n    const outFileDir = normalizeSeparators(host.dirname(sampleOutFileName));\n    if (srcFileDir === outFileDir) {\n      return (srcFileName) => srcFileName;\n    }\n    // calculate the common suffix, stopping\n    // at `outDir`.\n    const srcDirParts = srcFileDir.split('/');\n    const outDirParts = normalizeSeparators(host.relative(outDir, outFileDir)).split('/');\n    let i = 0;\n    while (i < Math.min(srcDirParts.length, outDirParts.length) &&\n    srcDirParts[srcDirParts.length - 1 - i] === outDirParts[outDirParts.length - 1 - i])\n      i++;\n    const rootDir = srcDirParts.slice(0, srcDirParts.length - i).join('/');\n    srcToOutPath = (srcFileName, reverse?) => reverse\n      ? host.resolve(rootDir, host.relative(outDir, srcFileName))\n      : host.resolve(outDir, host.relative(rootDir, srcFileName))\n    ;\n  } else {\n    srcToOutPath = (srcFileName) => srcFileName;\n  }\n  return srcToOutPath;\n}\n\nfunction normalizeSeparators(path: string): string {\n  return path.replace(/\\\\/g, '/');\n}\n"]}