{"version":3,"file":"ast_helpers.js","sourceRoot":"","sources":["../../../../../src/cli/transformers/fw/ast_helpers.ts"],"names":[],"mappings":";;AAAA,wBAAwB;AACxB,+BAAiC;AAEjC,yEAAyE;AACzE,0BAAoD,IAAa,EAAE,IAAmB;IACpF,IAAM,KAAK,GAAQ,EAAE,CAAC;IACtB,IAAM,MAAM,GAAG,UAAC,KAAc;QAC5B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YACxB,KAAK,CAAC,IAAI,CAAC,KAAU,CAAC,CAAC;QACzB,CAAC;QACD,EAAE,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC;IACF,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAE9B,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAXD,4CAWC;AAED,sBAA6B,UAAyB;IACpD,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IAC1C,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AALD,oCAKC;AAED,qBAA4B,UAAyB;IACnD,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;IACzE,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AALD,kCAKC","sourcesContent":["// @ignoreDep typescript\nimport * as ts from 'typescript';\n\n// Find all nodes from the AST in the subtree of node of SyntaxKind kind.\nexport function collectDeepNodes<T extends ts.Node>(node: ts.Node, kind: ts.SyntaxKind): T[] {\n  const nodes: T[] = [];\n  const helper = (child: ts.Node) => {\n    if (child.kind === kind) {\n      nodes.push(child as T);\n    }\n    ts.forEachChild(child, helper);\n  };\n  ts.forEachChild(node, helper);\n\n  return nodes;\n}\n\nexport function getFirstNode(sourceFile: ts.SourceFile): ts.Node | null {\n  if (sourceFile.statements.length > 0) {\n    return sourceFile.statements[0] || null;\n  }\n  return null;\n}\n\nexport function getLastNode(sourceFile: ts.SourceFile): ts.Node | null {\n  if (sourceFile.statements.length > 0) {\n    return sourceFile.statements[sourceFile.statements.length - 1] || null;\n  }\n  return null;\n}\n"]}