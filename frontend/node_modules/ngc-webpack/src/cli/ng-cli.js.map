{"version":3,"file":"ng-cli.js","sourceRoot":"","sources":["../../../src/cli/ng-cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport * as Path from 'path';\nimport * as FS from 'fs';\nimport * as minimist from 'minimist';\nimport * as resolve from 'resolve';\nimport { Configuration } from 'webpack';\nimport { NgCliWebpackConfig as _NgCliWebpackConfig } from '@angular/cli';\nimport { runCli } from './cli';\nimport { ParsedDiagnostics } from './util';\nimport { promisify, promiseWrapper } from '../utils';\n\nfunction freezeStdout(): () => void {\n  const old_stdout_write = process.stdout.write,\n    old_stderr_write = process.stderr.write,\n    old_console_error = console.error;\n\n  process.stdout.write = (...args: any[]) => true;\n  process.stderr.write = (...args: any[]) => true;\n  console.error = (...args: any[]) => {};\n\n  return () => {\n    process.stdout.write = old_stdout_write;\n    process.stderr.write = old_stderr_write;\n    console.error = old_console_error;\n  };\n}\n\nfunction tryFindNgScript(): Promise<string> {\n  return promisify<string, resolve.AsyncOpts, string>(resolve)('@angular/cli', { basedir: process.cwd() })\n    .then( resolvedPath => {\n      let value = resolvedPath;\n      const root = Path.parse(value).root;\n      while (value !== root) {\n        const base = Path.basename(value);\n        if (base  === 'node_modules') {\n          if (FS.existsSync(Path.resolve(value, '.bin/ng'))) {\n            return Path.resolve(value, '.bin/ng');\n          }\n        } else if (base === '') {\n          break;\n        }\n        else {\n          value = Path.dirname(value);\n        }\n      }\n      throw new Error(`Could not find ng script (starting at: ${resolvedPath}`);\n    });\n}\n\nfunction hijackCliConfiguration(): Promise<Configuration> {\n  const promise = promiseWrapper<Configuration>();\n  const state = {\n    config: undefined as Configuration,\n    err: undefined as Error,\n    unfreeze: undefined as () => void\n  };\n\n  const processExit = process.exit;\n  process.exit = <any> function (code?: number): void {\n    process.exit = processExit;\n    if (state.config) {\n      if (state.unfreeze) {\n        state.unfreeze();\n        delete state.unfreeze;\n      }\n      // error thrown to cancel cli work, suppress it and revert.\n      promise.resolve(state.config);\n    } else {\n      const e = state.err || new Error('Invalid state, integration between ngc-webpack and @angular/cli failed.');\n      promise.reject(e);\n    }\n  };\n\n  promisify<string, resolve.AsyncOpts, string>(resolve)('@angular/cli/models/webpack-config.js', { basedir: process.cwd() })\n    .then( value => {\n      const NgCliWebpackConfig: typeof _NgCliWebpackConfig = require(value).NgCliWebpackConfig;\n\n      const buildConfig = NgCliWebpackConfig.prototype.buildConfig;\n      NgCliWebpackConfig.prototype.buildConfig = function(...args) {\n        state.config = buildConfig.apply(this, args);\n        state.unfreeze = freezeStdout();\n        throw new Error('suppressed error');\n      };\n\n      return tryFindNgScript().then( ngScriptPath => require(ngScriptPath) );\n    })\n    .catch( err => {\n      state.err = err;\n      process.exit();\n    });\n\n  return promise.promise;\n}\n\n/**\n * Run `ngc-webpack` in library mode (i.e. run `ngc`) using `@angular/cli` (ng) configuration.\n * The cli is used to create a live instance of the webpack configuration, from there it is the same process as [[runCli]]\n *\n * `tsconfig` json path is taken from the options of AngularCompilerPlugin\n *\n * > This is not recommended, you would normally want to provide your own tsconfig with proper `angularCompilerOptions`.\n */\nexport function runNgCli(): Promise<ParsedDiagnostics>;\n/**\n * Run `ngc-webpack` in library mode (i.e. run `ngc`) using `@angular/cli` (ng) configuration.\n * The cli is used to create a live instance of the webpack configuration, from there it is the same process as [[runCli]]\n *\n * `tsconfig` json path is taken from cli parameters (-p or --project) or, if not exists the options of\n * AngularCompilerPlugin\n *\n * @param cliParams cli Parameters, parsedArgs is not mandatory\n */\nexport function runNgCli(cliParams: { args: string[], parsedArgs?: minimist.ParsedArgs }): Promise<ParsedDiagnostics>;\n/**\n * Run `ngc-webpack` in library mode (i.e. run `ngc`) using `@angular/cli` (ng) configuration.\n * The cli is used to create a live instance of the webpack configuration, from there it is the same process as [[runCli]]\n *\n * `tsconfig` json path is taken from the supplied tsConfigPath parameter.\n *\n * @param {string} tsConfigPath\n * @param cliParams cli Parameters, parsedArgs is not mandatory\n */\nexport function runNgCli(tsConfigPath: string,\n                         cliParams?: { args: string[], parsedArgs?: minimist.ParsedArgs }): Promise<ParsedDiagnostics>;\nexport function runNgCli(tsConfigPath?: any,\n                         cliParams?: { args: string[], parsedArgs?: minimist.ParsedArgs }): Promise<ParsedDiagnostics> {\n  const p = hijackCliConfiguration();\n  return p.then( (webpackConfig) => runCli(webpackConfig, tsConfigPath, cliParams) );\n}\n\n\nif (require.main === module) {\n  const args: string[] = process.argv.slice(2);\n  const parsedArgs = minimist(args);\n\n  // p or project is not part of angular cli\n  if ('p' in parsedArgs) {\n    process.argv.splice(process.argv.indexOf('-p'), 2);\n  }\n  if ('project' in parsedArgs) {\n    process.argv.splice(process.argv.indexOf('--project'), 2);\n  }\n\n  runNgCli({ args, parsedArgs })\n    .then( parsedDiagnostics => {\n      if (parsedDiagnostics.error) {\n        throw parsedDiagnostics.error;\n      }\n    })\n    .catch( err => {\n      console.error(err);\n      process.exit(1);\n    });\n}\n"]}