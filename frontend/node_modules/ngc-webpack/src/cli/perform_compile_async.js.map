{"version":3,"file":"perform_compile_async.js","sourceRoot":"","sources":["../../../src/cli/perform_compile_async.ts"],"names":[],"mappings":"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","sourcesContent":["/*  Copied from https://github.com/angular/angular/blob/master/packages/compiler-cli/src/perform_compile.ts\n    but witch async support for program.loadNgStructureAsync()\n */\n\nimport * as ts from 'typescript';\nimport { isSyntaxError } from '@angular/compiler';\nimport { Program, CompilerHost, CompilerOptions, TsEmitCallback, CustomTransformers, PerformCompilationResult, createCompilerHost, createProgram, Diagnostic, Diagnostics, EmitFlags, DEFAULT_ERROR_CODE, UNKNOWN_ERROR_CODE, SOURCE } from '@angular/compiler-cli';\n\nexport function performCompilationAsync({rootNames, options, host, oldProgram, emitCallback,\n                                     gatherDiagnostics = asyncDiagnostics,\n                                     customTransformers, emitFlags = EmitFlags.Default}: {\n  rootNames: string[],\n  options: CompilerOptions,\n  host?: CompilerHost,\n  oldProgram?: Program,\n  emitCallback?: TsEmitCallback,\n  gatherDiagnostics?: (program: Program) => Diagnostics,\n  customTransformers?: CustomTransformers,\n  emitFlags?: EmitFlags\n}): Promise<PerformCompilationResult> {\n  let program: Program | undefined;\n  let emitResult: ts.EmitResult|undefined;\n  let allDiagnostics: Diagnostics = [];\n\n  return Promise.resolve()\n    .then( () => {\n      if (!host) {\n        host = createCompilerHost({options});\n      }\n      program = createProgram({rootNames, host, options, oldProgram});\n      return program.loadNgStructureAsync()\n    })\n    .then( () => {\n      const beforeDiags = Date.now();\n      allDiagnostics.push(...gatherDiagnostics(program !));\n      if (options.diagnostics) {\n        const afterDiags = Date.now();\n        allDiagnostics.push(\n          createMessageDiagnostic(`Time for diagnostics: ${afterDiags - beforeDiags}ms.`));\n      }\n\n      if (!hasErrors(allDiagnostics)) {\n        emitResult = program !.emit({emitCallback, customTransformers, emitFlags});\n        allDiagnostics.push(...emitResult.diagnostics);\n        return {diagnostics: allDiagnostics, program, emitResult};\n      }\n      return {diagnostics: allDiagnostics, program};\n    })\n    .catch( e => {\n      let errMsg: string;\n      let code: number;\n      if (isSyntaxError(e)) {\n        // don't report the stack for syntax errors as they are well known errors.\n        errMsg = e.message;\n        code = DEFAULT_ERROR_CODE;\n      } else {\n        errMsg = e.stack;\n        // It is not a syntax error we might have a program with unknown state, discard it.\n        program = undefined;\n        code = UNKNOWN_ERROR_CODE;\n      }\n      allDiagnostics.push(\n        {category: ts.DiagnosticCategory.Error, messageText: errMsg, code, source: SOURCE});\n      return {diagnostics: allDiagnostics, program};\n    })\n}\n\n\nfunction asyncDiagnostics(angularProgram: Program): Diagnostics {\n  const allDiagnostics: Diagnostics = [];\n\n  // Check Angular structural diagnostics.\n  allDiagnostics.push(...angularProgram.getNgStructuralDiagnostics());\n\n  // Check TypeScript parameter diagnostics.\n  allDiagnostics.push(...angularProgram.getTsOptionDiagnostics());\n\n  // Check Angular parameter diagnostics.\n  allDiagnostics.push(...angularProgram.getNgOptionDiagnostics());\n\n\n  function checkDiagnostics(diags: Diagnostics | undefined) {\n    if (diags) {\n      allDiagnostics.push(...diags);\n      return !hasErrors(diags);\n    }\n    return true;\n  }\n\n  let checkOtherDiagnostics = true;\n  // Check TypeScript syntactic diagnostics.\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n    checkDiagnostics(angularProgram.getTsSyntacticDiagnostics(undefined));\n\n  // Check TypeScript semantic and Angular structure diagnostics.\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n    checkDiagnostics(angularProgram.getTsSemanticDiagnostics(undefined));\n\n  // Check Angular semantic diagnostics\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n    checkDiagnostics(angularProgram.getNgSemanticDiagnostics(undefined));\n\n  return allDiagnostics;\n}\n\nfunction defaultGatherDiagnostics(program: Program): Diagnostics {\n  const allDiagnostics: Diagnostics = [];\n\n  function checkDiagnostics(diags: Diagnostics | undefined) {\n    if (diags) {\n      allDiagnostics.push(...diags);\n      return !hasErrors(diags);\n    }\n    return true;\n  }\n\n  let checkOtherDiagnostics = true;\n  // Check parameter diagnostics\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n    checkDiagnostics([...program.getTsOptionDiagnostics(), ...program.getNgOptionDiagnostics()]);\n\n  // Check syntactic diagnostics\n  checkOtherDiagnostics =\n    checkOtherDiagnostics && checkDiagnostics(program.getTsSyntacticDiagnostics());\n\n  // Check TypeScript semantic and Angular structure diagnostics\n  checkOtherDiagnostics =\n    checkOtherDiagnostics &&\n    checkDiagnostics(\n      [...program.getTsSemanticDiagnostics(), ...program.getNgStructuralDiagnostics()]);\n\n  // Check Angular semantic diagnostics\n  checkOtherDiagnostics =\n    checkOtherDiagnostics && checkDiagnostics(program.getNgSemanticDiagnostics());\n\n  return allDiagnostics;\n}\n\nfunction hasErrors(diags: Diagnostics) {\n  return diags.some(d => d.category === ts.DiagnosticCategory.Error);\n}\n\nfunction createMessageDiagnostic(messageText: string): ts.Diagnostic & Diagnostic {\n  return {\n    file: undefined,\n    start: undefined,\n    length: undefined,\n    category: ts.DiagnosticCategory.Message, messageText,\n    code: DEFAULT_ERROR_CODE,\n    source: SOURCE,\n  };\n}\n"]}