import { NgcWebpackPluginOptions as NgcOptions } from './plugin-options';
import { MonkeyAngularCompilerPlugin } from './monkies';
export declare function hasHook(options: NgcOptions, name: Array<keyof NgcOptions>): boolean[];
export declare function hasHook(options: NgcOptions, name: keyof NgcOptions): boolean;
export declare function isValidAngularCompilerPlugin(instance: MonkeyAngularCompilerPlugin): boolean;
export declare function promiseWrapper<T>(): {
    promise: Promise<T>;
    resolve: (value?: T) => void;
    reject: (reason?: any) => void;
};
export declare function promisify<T>(f: (cb: (err: any, res: T) => void) => void, thisContext?: any): () => Promise<T>;
export declare function promisify<A, T>(f: (arg: A, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A) => Promise<T>;
export declare function promisify<A, A2, T>(f: (arg: A, arg2: A2, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2) => Promise<T>;
export declare function promisify<A, A2, A3, T>(f: (arg: A, arg2: A2, arg3: A3, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2, arg3: A3) => Promise<T>;
export declare function promisify<A, A2, A3, A4, T>(f: (arg: A, arg2: A2, arg3: A3, arg4: A4, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2, arg3: A3, arg4: A4) => Promise<T>;
export declare function promisify<A, A2, A3, A4, A5, T>(f: (arg: A, arg2: A2, arg3: A3, arg4: A4, arg5: A5, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Promise<T>;
