{"version":3,"file":"plugin-options.js","sourceRoot":"","sources":["../../src/plugin-options.ts"],"names":[],"mappings":"","sourcesContent":["import * as ts from 'typescript';\nimport { AngularCompilerPluginOptions } from '@ngtools/webpack';\n\nexport type BeforeRunHandler = ( resourceCompiler: { get(filename: string): Promise<string> }) => void | Promise<void>;\nexport type ResourcePathTransformer = (path: string) => string;\nexport type ResourceTransformer = (path: string, source: string) => string | Promise<string>;\nexport type ReadFileTransformer = {\n  predicate: RegExp | ( (path: string) => boolean ),\n  transform: (path: string, source: string) => string\n};\n\n\nexport interface NgcWebpackPluginOptions extends AngularCompilerPluginOptions {\n\n  /**\n   * An alias for `AngularCompilerPluginOptions.skipCodeGeneration` simply to make it more readable.\n   * If `skipCodeGeneration` is set, this value is ignored.\n   * If this value is not set, the default value is taken from `skipCodeGeneration`\n   * (which means AOT = true)\n   */\n  AOT?: boolean;\n\n  /**\n   * A hook that invokes before the plugin start the compilation process (compiler 'run' event).\n   * ( resourceCompiler: { get(filename: string): Promise<string> }) => Promise<void>;\n   *\n   * The hook accepts a resource compiler which able (using webpack) to perform compilation on\n   * files using webpack's loader chain and return the final content.\n   * @param resourceCompiler\n   */\n  beforeRun?: BeforeRunHandler\n\n  /**\n   * Transform a source file (ts, js, metadata.json, summery.json).\n   * If `predicate` is true invokes `transform`\n   *\n   * > Run's in both AOT and JIT mode on all files, internal and external as well as resources.\n   *\n   *\n   *  - Do not apply changes to resource files using this hook when in AOT mode, it will not commit.\n   *  - Do not apply changes to resource files in watch mode.\n   *\n   * Note that source code transformation is sync, you can't return a promise (contrary to `resourcePathTransformer`).\n   * This means that you can not use webpack compilation (or any other async process) to alter source code context.\n   * If you know the files you need to transform, use the `beforeRun` hook.\n   */\n  readFileTransformer?: ReadFileTransformer;\n\n\n  /**\n   * Transform the path of a resource (html, css, etc)\n   * (path: string) => string;\n   *\n   * > Run's in AOT mode only and on metadata resource files (templateUrl, styleUrls)\n   */\n  resourcePathTransformer?: ResourcePathTransformer;\n\n  /**\n   * Transform a resource (html, css etc)\n   * (path: string, source: string) => string | Promise<string>;\n   *\n   * > Run's in AOT mode only and on metadata resource files (templateUrl, styleUrls)\n   */\n  resourceTransformer?: ResourceTransformer;\n\n  /**\n   * Add custom TypeScript transformers to the compilation process.\n   *\n   * Transformers are applied after the transforms added by `@angular/compiler-cli` and\n   * `@ngtools/webpack`.\n   *\n   * > `after` transformers are currently not supported.\n   */\n  tsTransformers?: ts.CustomTransformers;\n}"]}