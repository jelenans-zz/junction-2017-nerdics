{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;AAKA,iBAAwB,OAAmB,EAAE,IAAgD;IAC3F,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,OAAO,OAAO,CAAC,CAAC,CAAC,KAAK,UAAU,EAAhC,CAAgC,CAAE,CAAC;IAC3D,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;IAC7C,CAAC;AACH,CAAC;AAND,0BAMC;AAED,sCAA6C,QAAqC;IAChF,MAAM,CAAC,UAAU,CAAC,KAAK,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,CAAC,EAAX,CAAW,CAAE,CAAC;AAC9C,CAAC;AAFD,oEAEC;AAED,IAAM,UAAU,GAA8D;IAC5E,UAAC,QAAqC,IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAArC,CAAqC;IAChF,UAAC,QAAqC,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAxB,CAAwB;IACnE,UAAC,QAAqC,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,eAAe,EAAxC,CAAwC;IACnF,UAAC,QAAqC,IAAK,OAAA,OAAO,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,KAAK,UAAU,EAAhE,CAAgE;CAC5G,CAAC;AAGF;IACE,IAAM,OAAO,GAAgG,EAAE,CAAC;IAChH,OAAO,CAAC,OAAO,GAAG,IAAI,OAAO,CAAK,UAAC,GAAG,EAAE,GAAG,IAAO,OAAO,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAClG,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC;AAJD,wCAIC;AAWD,mBAA0B,CAAM,EAAE,WAAiB;IACjD,MAAM,CAAC;QACL,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAQ,EAAE,MAAW,IAAK,OAAA,GAAG,KAAK,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,EAA5C,CAA4C,CAAC,CAAC;YACnF,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAA;AACH,CAAC;AARD,8BAQC","sourcesContent":["import { NgcWebpackPluginOptions as NgcOptions } from './plugin-options'\nimport { MonkeyAngularCompilerPlugin } from './monkies';\n\nexport function hasHook(options: NgcOptions, name: Array<keyof NgcOptions>): boolean[];\nexport function hasHook(options: NgcOptions, name: keyof NgcOptions): boolean;\nexport function hasHook(options: NgcOptions, name: keyof NgcOptions | Array<keyof NgcOptions>): boolean | boolean[] {\n  if (Array.isArray(name)) {\n    return name.map( n => typeof options[n] === 'function' );\n  } else {\n    return typeof options[name] === 'function';\n  }\n}\n\nexport function isValidAngularCompilerPlugin(instance: MonkeyAngularCompilerPlugin): boolean {\n  return validators.every( m => m(instance) );\n}\n\nconst validators: Array<(instance: MonkeyAngularCompilerPlugin) => boolean> = [\n  (instance: MonkeyAngularCompilerPlugin) => Array.isArray(instance._transformers),\n  (instance: MonkeyAngularCompilerPlugin) => !!instance._compilerHost,\n  (instance: MonkeyAngularCompilerPlugin) => !!instance._compilerHost._resourceLoader,\n  (instance: MonkeyAngularCompilerPlugin) => typeof instance._compilerHost._resourceLoader.get === 'function'\n];\n\n\nexport function promiseWrapper<T>() {\n  const wrapper: { promise: Promise<T>; resolve: (value?: T) => void; reject: (reason?: any) => void } = <any> {};\n  wrapper.promise = new Promise<T>( (res, rej) => { wrapper.resolve = res; wrapper.reject = rej; });\n  return wrapper;\n}\n\n// taken from:\n// https://github.com/notenoughneon/typed-promisify/blob/master/index.ts\nexport function promisify<T>(f: (cb: (err: any, res: T) => void) => void, thisContext?: any): () => Promise<T>;\nexport function promisify<A, T>(f: (arg: A, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A) => Promise<T>;\nexport function promisify<A, A2, T>(f: (arg: A, arg2: A2, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2) => Promise<T>;\nexport function promisify<A, A2, A3, T>(f: (arg: A, arg2: A2, arg3: A3, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2, arg3: A3) => Promise<T>;\nexport function promisify<A, A2, A3, A4, T>(f: (arg: A, arg2: A2, arg3: A3, arg4: A4, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2, arg3: A3, arg4: A4) => Promise<T>;\nexport function promisify<A, A2, A3, A4, A5, T>(f: (arg: A, arg2: A2, arg3: A3, arg4: A4, arg5: A5, cb: (err: any, res: T) => void) => void, thisContext?: any): (arg: A, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Promise<T>;\n\nexport function promisify(f: any, thisContext?: any) {\n  return function () {\n    let args = Array.prototype.slice.call(arguments);\n    return new Promise((resolve, reject) => {\n      args.push((err: any, result: any) => err !== null ? reject(err) : resolve(result));\n      f.apply(thisContext, args);\n    });\n  }\n}"]}